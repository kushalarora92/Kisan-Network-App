"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Right now only key/secret credentials are supported.
 * However, in time JWT will also be supported.
 * The `Credentials` object provides an abstraction to this.
 */

var Credentials = function () {
  function Credentials(apiKey, apiSecret) {
    _classCallCheck(this, Credentials);

    this.apiKey = apiKey;
    this.apiSecret = apiSecret;
  }

  /**
   * Ensures a credentials instance is used.
   * 
   * Key/Secret credentials are only supported at present.
   */


  _createClass(Credentials, null, [{
    key: "parse",
    value: function parse(obj) {
      if (obj instanceof Credentials) {
        return obj;
      } else {
        return new Credentials(obj.apiKey, obj.apiSecret);
      }
    }
  }]);

  return Credentials;
}();

exports.default = Credentials;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9DcmVkZW50aWFscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0lBS00sVztBQUNKLHVCQUFZLE1BQVosRUFBb0IsU0FBcEIsRUFBK0I7QUFBQTs7QUFDN0IsU0FBSyxNQUFMLEdBQWMsTUFBZDtBQUNBLFNBQUssU0FBTCxHQUFpQixTQUFqQjtBQUNEOzs7Ozs7Ozs7OzswQkFPWSxHLEVBQUs7QUFDaEIsVUFBRyxlQUFlLFdBQWxCLEVBQStCO0FBQzdCLGVBQU8sR0FBUDtBQUNELE9BRkQsTUFHSztBQUNILGVBQU8sSUFBSSxXQUFKLENBQWdCLElBQUksTUFBcEIsRUFBNEIsSUFBSSxTQUFoQyxDQUFQO0FBQ0Q7QUFDRjs7Ozs7O2tCQUdZLFciLCJmaWxlIjoiQ3JlZGVudGlhbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJpZ2h0IG5vdyBvbmx5IGtleS9zZWNyZXQgY3JlZGVudGlhbHMgYXJlIHN1cHBvcnRlZC5cbiAqIEhvd2V2ZXIsIGluIHRpbWUgSldUIHdpbGwgYWxzbyBiZSBzdXBwb3J0ZWQuXG4gKiBUaGUgYENyZWRlbnRpYWxzYCBvYmplY3QgcHJvdmlkZXMgYW4gYWJzdHJhY3Rpb24gdG8gdGhpcy5cbiAqL1xuY2xhc3MgQ3JlZGVudGlhbHMge1xuICBjb25zdHJ1Y3RvcihhcGlLZXksIGFwaVNlY3JldCkge1xuICAgIHRoaXMuYXBpS2V5ID0gYXBpS2V5O1xuICAgIHRoaXMuYXBpU2VjcmV0ID0gYXBpU2VjcmV0O1xuICB9XG4gIFxuICAvKipcbiAgICogRW5zdXJlcyBhIGNyZWRlbnRpYWxzIGluc3RhbmNlIGlzIHVzZWQuXG4gICAqIFxuICAgKiBLZXkvU2VjcmV0IGNyZWRlbnRpYWxzIGFyZSBvbmx5IHN1cHBvcnRlZCBhdCBwcmVzZW50LlxuICAgKi9cbiAgc3RhdGljIHBhcnNlKG9iaikge1xuICAgIGlmKG9iaiBpbnN0YW5jZW9mIENyZWRlbnRpYWxzKSB7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgQ3JlZGVudGlhbHMob2JqLmFwaUtleSwgb2JqLmFwaVNlY3JldCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENyZWRlbnRpYWxzO1xuIl19