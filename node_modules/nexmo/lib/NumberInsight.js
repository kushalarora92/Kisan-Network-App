"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NumberInsight = function () {

  /**
   * @param {Credentials} credentials
   *    credentials to be used when interacting with the API.
   * @param {Object} options
   *    Addition NumberInsight options.
   */

  function NumberInsight(credentials) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    _classCallCheck(this, NumberInsight);

    this.creds = credentials;
    this.options = options;

    // Used to facilitate testing of the call to the underlying object
    this._nexmo = this.options.nexmoOverride || _index2.default;

    this._nexmo.initialize(this.creds.apiKey, this.creds.apiSecret, this.options.debug);
  }

  /**
   * Get insight on the provided number.
   *
   * @param {Object} options - The options for Number Insight
   * @param {string} options.level - the level of insight: 'basic', 'standard'
   *                 or 'advanced'.
   *                 If no `level` value is provided, or an unrecognised value
   *                 is used, 'basic' level insight will be used.
   * @param {string} options.number - the phone number to retrieve insight on
   * @param {string} options.country - 'basic' and 'standard' only.
   *                 An ISO 3166 Alpha 2 country code
   *                 https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
   * @param {string} options. ip - 'advanced' only.
   *                 The IP address in IPv4 notation of the endpoint the 
   *                 user connected from.
   * @param {Array}  options.features - 'advanced' only.
   *                 An Array detailing the information you want for this phone 
   *                 number. Possible Array elements are:
   *                 - type: number is one of the following: mobile, landline,
   *                          landline_premium or unknown phone number.
   *                 - valid: number exists.
   *                 - reachable: is number available now.
   *                 - carrier: the MCCMNC for the carrier number is registered
   *                             with. This is either: <ISO country code>-FIXED 
   *                             or <ISO country code>-PREMIUM.
   *                 - ported: if the user has changed carrier for number.
   *                 - roaming: the subscriber is outside their home network
   * 
   * @param {string} options.callback - 'advanced' only.
   *                 The callback to be called when the API call completes.
   * @param {Number} options.callback_timeout - 'advanced' only.
   *                 The maximum wait until the Number Insight Return Parameters
   *                 are sent to callback. This is a value between 1000 - 30000ms 
   *                 inclusive. The default is 30000 ms.
   * @param {string} options.callback_method - 'advanced' only.
   *                 The HTTP method used to send the Number Insight Return 
   *                 Parameters to callback. Must be GET or POST. The default 
   *                 value is GET.
   * @param {string} options.client_ref - 'advanced' only.
   *                 A 40 character reference string returned in the Number 
   *                 Insight Return Parameters. This may be useful for your 
   *                 internal reports.
   * @param {string} options['include-intermediate-callbacks'] - 'advanced' only.
   *                 Tells the Nexmo platform to make callbacks as soon as an 
   *                 individual piece of information is retrieved.
   */


  _createClass(NumberInsight, [{
    key: 'get',
    value: function get(options, callback) {
      var level = options.level;
      // remove 'level' as it's a library-only parameter
      delete options.level;

      if (level === 'advanced') {
        this._nexmo.numberInsight.apply(this._nexmo, arguments);
      } else if (level === 'standard') {
        this._nexmo.numberInsightStandard.apply(this._nexmo, arguments);
      } else {
        this._nexmo.numberInsightBasic.apply(this._nexmo, arguments);
      }
    }
  }]);

  return NumberInsight;
}();

exports.default = NumberInsight;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9OdW1iZXJJbnNpZ2h0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVBOzs7Ozs7OztJQUVNLGE7Ozs7Ozs7OztBQVFKLHlCQUFZLFdBQVosRUFBdUM7QUFBQSxRQUFkLE9BQWMseURBQUosRUFBSTs7QUFBQTs7QUFDckMsU0FBSyxLQUFMLEdBQWEsV0FBYjtBQUNBLFNBQUssT0FBTCxHQUFlLE9BQWY7OztBQUdBLFNBQUssTUFBTCxHQUFjLEtBQUssT0FBTCxDQUFhLGFBQWIsbUJBQWQ7O0FBRUEsU0FBSyxNQUFMLENBQVksVUFBWixDQUF1QixLQUFLLEtBQUwsQ0FBVyxNQUFsQyxFQUEwQyxLQUFLLEtBQUwsQ0FBVyxTQUFyRCxFQUFnRSxLQUFLLE9BQUwsQ0FBYSxLQUE3RTtBQUNEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3dCQWdERyxPLEVBQVMsUSxFQUFVO0FBQ3JCLFVBQUksUUFBUSxRQUFRLEtBQXBCOztBQUVBLGFBQU8sUUFBUSxLQUFmOztBQUVBLFVBQUcsVUFBVSxVQUFiLEVBQXlCO0FBQ3ZCLGFBQUssTUFBTCxDQUFZLGFBQVosQ0FBMEIsS0FBMUIsQ0FBZ0MsS0FBSyxNQUFyQyxFQUE2QyxTQUE3QztBQUNELE9BRkQsTUFHSyxJQUFHLFVBQVUsVUFBYixFQUF5QjtBQUM1QixhQUFLLE1BQUwsQ0FBWSxxQkFBWixDQUFrQyxLQUFsQyxDQUF3QyxLQUFLLE1BQTdDLEVBQXFELFNBQXJEO0FBQ0QsT0FGSSxNQUdBO0FBQ0gsYUFBSyxNQUFMLENBQVksa0JBQVosQ0FBK0IsS0FBL0IsQ0FBcUMsS0FBSyxNQUExQyxFQUFrRCxTQUFsRDtBQUNEO0FBQ0Y7Ozs7OztrQkFJWSxhIiwiZmlsZSI6Ik51bWJlckluc2lnaHQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IG5leG1vIGZyb20gJy4vaW5kZXgnO1xuXG5jbGFzcyBOdW1iZXJJbnNpZ2h0IHtcbiAgXG4gIC8qKlxuICAgKiBAcGFyYW0ge0NyZWRlbnRpYWxzfSBjcmVkZW50aWFsc1xuICAgKiAgICBjcmVkZW50aWFscyB0byBiZSB1c2VkIHdoZW4gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgQVBJLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiAgICBBZGRpdGlvbiBOdW1iZXJJbnNpZ2h0IG9wdGlvbnMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihjcmVkZW50aWFscywgb3B0aW9ucyA9IHt9KSB7XG4gICAgdGhpcy5jcmVkcyA9IGNyZWRlbnRpYWxzO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgXG4gICAgLy8gVXNlZCB0byBmYWNpbGl0YXRlIHRlc3Rpbmcgb2YgdGhlIGNhbGwgdG8gdGhlIHVuZGVybHlpbmcgb2JqZWN0XG4gICAgdGhpcy5fbmV4bW8gPSB0aGlzLm9wdGlvbnMubmV4bW9PdmVycmlkZSB8fCBuZXhtbztcbiAgICBcbiAgICB0aGlzLl9uZXhtby5pbml0aWFsaXplKHRoaXMuY3JlZHMuYXBpS2V5LCB0aGlzLmNyZWRzLmFwaVNlY3JldCwgdGhpcy5vcHRpb25zLmRlYnVnKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEdldCBpbnNpZ2h0IG9uIHRoZSBwcm92aWRlZCBudW1iZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIE51bWJlciBJbnNpZ2h0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmxldmVsIC0gdGhlIGxldmVsIG9mIGluc2lnaHQ6ICdiYXNpYycsICdzdGFuZGFyZCdcbiAgICogICAgICAgICAgICAgICAgIG9yICdhZHZhbmNlZCcuXG4gICAqICAgICAgICAgICAgICAgICBJZiBubyBgbGV2ZWxgIHZhbHVlIGlzIHByb3ZpZGVkLCBvciBhbiB1bnJlY29nbmlzZWQgdmFsdWVcbiAgICogICAgICAgICAgICAgICAgIGlzIHVzZWQsICdiYXNpYycgbGV2ZWwgaW5zaWdodCB3aWxsIGJlIHVzZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm51bWJlciAtIHRoZSBwaG9uZSBudW1iZXIgdG8gcmV0cmlldmUgaW5zaWdodCBvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5jb3VudHJ5IC0gJ2Jhc2ljJyBhbmQgJ3N0YW5kYXJkJyBvbmx5LlxuICAgKiAgICAgICAgICAgICAgICAgQW4gSVNPIDMxNjYgQWxwaGEgMiBjb3VudHJ5IGNvZGVcbiAgICogICAgICAgICAgICAgICAgIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT18zMTY2LTFfYWxwaGEtMlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy4gaXAgLSAnYWR2YW5jZWQnIG9ubHkuXG4gICAqICAgICAgICAgICAgICAgICBUaGUgSVAgYWRkcmVzcyBpbiBJUHY0IG5vdGF0aW9uIG9mIHRoZSBlbmRwb2ludCB0aGUgXG4gICAqICAgICAgICAgICAgICAgICB1c2VyIGNvbm5lY3RlZCBmcm9tLlxuICAgKiBAcGFyYW0ge0FycmF5fSAgb3B0aW9ucy5mZWF0dXJlcyAtICdhZHZhbmNlZCcgb25seS5cbiAgICogICAgICAgICAgICAgICAgIEFuIEFycmF5IGRldGFpbGluZyB0aGUgaW5mb3JtYXRpb24geW91IHdhbnQgZm9yIHRoaXMgcGhvbmUgXG4gICAqICAgICAgICAgICAgICAgICBudW1iZXIuIFBvc3NpYmxlIEFycmF5IGVsZW1lbnRzIGFyZTpcbiAgICogICAgICAgICAgICAgICAgIC0gdHlwZTogbnVtYmVyIGlzIG9uZSBvZiB0aGUgZm9sbG93aW5nOiBtb2JpbGUsIGxhbmRsaW5lLFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgbGFuZGxpbmVfcHJlbWl1bSBvciB1bmtub3duIHBob25lIG51bWJlci5cbiAgICogICAgICAgICAgICAgICAgIC0gdmFsaWQ6IG51bWJlciBleGlzdHMuXG4gICAqICAgICAgICAgICAgICAgICAtIHJlYWNoYWJsZTogaXMgbnVtYmVyIGF2YWlsYWJsZSBub3cuXG4gICAqICAgICAgICAgICAgICAgICAtIGNhcnJpZXI6IHRoZSBNQ0NNTkMgZm9yIHRoZSBjYXJyaWVyIG51bWJlciBpcyByZWdpc3RlcmVkXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoLiBUaGlzIGlzIGVpdGhlcjogPElTTyBjb3VudHJ5IGNvZGU+LUZJWEVEIFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgPElTTyBjb3VudHJ5IGNvZGU+LVBSRU1JVU0uXG4gICAqICAgICAgICAgICAgICAgICAtIHBvcnRlZDogaWYgdGhlIHVzZXIgaGFzIGNoYW5nZWQgY2FycmllciBmb3IgbnVtYmVyLlxuICAgKiAgICAgICAgICAgICAgICAgLSByb2FtaW5nOiB0aGUgc3Vic2NyaWJlciBpcyBvdXRzaWRlIHRoZWlyIGhvbWUgbmV0d29ya1xuICAgKiBcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuY2FsbGJhY2sgLSAnYWR2YW5jZWQnIG9ubHkuXG4gICAqICAgICAgICAgICAgICAgICBUaGUgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIEFQSSBjYWxsIGNvbXBsZXRlcy5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMuY2FsbGJhY2tfdGltZW91dCAtICdhZHZhbmNlZCcgb25seS5cbiAgICogICAgICAgICAgICAgICAgIFRoZSBtYXhpbXVtIHdhaXQgdW50aWwgdGhlIE51bWJlciBJbnNpZ2h0IFJldHVybiBQYXJhbWV0ZXJzXG4gICAqICAgICAgICAgICAgICAgICBhcmUgc2VudCB0byBjYWxsYmFjay4gVGhpcyBpcyBhIHZhbHVlIGJldHdlZW4gMTAwMCAtIDMwMDAwbXMgXG4gICAqICAgICAgICAgICAgICAgICBpbmNsdXNpdmUuIFRoZSBkZWZhdWx0IGlzIDMwMDAwIG1zLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5jYWxsYmFja19tZXRob2QgLSAnYWR2YW5jZWQnIG9ubHkuXG4gICAqICAgICAgICAgICAgICAgICBUaGUgSFRUUCBtZXRob2QgdXNlZCB0byBzZW5kIHRoZSBOdW1iZXIgSW5zaWdodCBSZXR1cm4gXG4gICAqICAgICAgICAgICAgICAgICBQYXJhbWV0ZXJzIHRvIGNhbGxiYWNrLiBNdXN0IGJlIEdFVCBvciBQT1NULiBUaGUgZGVmYXVsdCBcbiAgICogICAgICAgICAgICAgICAgIHZhbHVlIGlzIEdFVC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuY2xpZW50X3JlZiAtICdhZHZhbmNlZCcgb25seS5cbiAgICogICAgICAgICAgICAgICAgIEEgNDAgY2hhcmFjdGVyIHJlZmVyZW5jZSBzdHJpbmcgcmV0dXJuZWQgaW4gdGhlIE51bWJlciBcbiAgICogICAgICAgICAgICAgICAgIEluc2lnaHQgUmV0dXJuIFBhcmFtZXRlcnMuIFRoaXMgbWF5IGJlIHVzZWZ1bCBmb3IgeW91ciBcbiAgICogICAgICAgICAgICAgICAgIGludGVybmFsIHJlcG9ydHMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zWydpbmNsdWRlLWludGVybWVkaWF0ZS1jYWxsYmFja3MnXSAtICdhZHZhbmNlZCcgb25seS5cbiAgICogICAgICAgICAgICAgICAgIFRlbGxzIHRoZSBOZXhtbyBwbGF0Zm9ybSB0byBtYWtlIGNhbGxiYWNrcyBhcyBzb29uIGFzIGFuIFxuICAgKiAgICAgICAgICAgICAgICAgaW5kaXZpZHVhbCBwaWVjZSBvZiBpbmZvcm1hdGlvbiBpcyByZXRyaWV2ZWQuXG4gICAqL1xuICBnZXQob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICB2YXIgbGV2ZWwgPSBvcHRpb25zLmxldmVsO1xuICAgIC8vIHJlbW92ZSAnbGV2ZWwnIGFzIGl0J3MgYSBsaWJyYXJ5LW9ubHkgcGFyYW1ldGVyXG4gICAgZGVsZXRlIG9wdGlvbnMubGV2ZWw7XG4gICAgXG4gICAgaWYobGV2ZWwgPT09ICdhZHZhbmNlZCcpIHtcbiAgICAgIHRoaXMuX25leG1vLm51bWJlckluc2lnaHQuYXBwbHkodGhpcy5fbmV4bW8sIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIGVsc2UgaWYobGV2ZWwgPT09ICdzdGFuZGFyZCcpIHtcbiAgICAgIHRoaXMuX25leG1vLm51bWJlckluc2lnaHRTdGFuZGFyZC5hcHBseSh0aGlzLl9uZXhtbywgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLl9uZXhtby5udW1iZXJJbnNpZ2h0QmFzaWMuYXBwbHkodGhpcy5fbmV4bW8sIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG4gIFxufVxuXG5leHBvcnQgZGVmYXVsdCBOdW1iZXJJbnNpZ2h0O1xuIl19